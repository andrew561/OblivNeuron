
#include <stdio.h>
#include <stdlib.h>

#include <obliv.oh>

#include "neuron.h"
#include "neuron.oh"
#include "dbg.h"

void neuron(void *args) {
    protocolIO *io = (protocolIO*) args;
    int party = ocCurrentParty();

    int *weights = NULL, *inputs = NULL; 
    load_data(io, &weights, &inputs, party); 
    check_input_count(io);

    obliv int output = 0; // output value of neuron
    obliv int *oweights = NULL, *oinputs = NULL;
    oweights = malloc(sizeof(obliv int) * io->n);
    oinputs = malloc(sizeof(obliv int) * io->n);
    // can't check if malloc succeeded here because that would be
    // conditioned on an oblivious variable

    convert_to_obliv(io, oweights, weights, 1);
    convert_to_obliv(io, oinputs, inputs, 2);
    free(weights);
    free(inputs);

    approx_logistic(io, oweights, oinputs);
    free(oweights);
    free(oinputs);
}
     
void convert_to_obliv(protocolIO *io, obliv int *oa, int *a, int party) {
    int i;
    for(i = 0; i < io->n; i++) {
        oa[i] = feedOblivInt(a[i], party);
    }
}

void approx_logistic(protocolIO *io, obliv int *oweights, obliv int *oinputs) {
    obliv int oexponent = dot_product(oweights, oinputs, io->n);

    obliv int ooutput;
    obliv if (oexponent >= 0xfffc0001) {
        obliv if (oexponent < 0xfffc8001) {
            ooutput = 0x000005cc * oexponent + 0x00001bcc;
        }
    }
    obliv if (oexponent >= 0xfffc8001) {
        obliv if (oexponent < 0xfffd0001) {
            ooutput = 0x00000946 * oexponent + 0x000027f6;
        }
    }
    obliv if (oexponent >= 0xfffd0001) {
        obliv if (oexponent < 0xfffd8001) {
            ooutput = 0x00000e8e * oexponent + 0x000037d0;
        }
    }
    obliv if (oexponent >= 0xfffd8001) {
        obliv if (oexponent < 0xfffe0001) {
            ooutput = 0x00001631 * oexponent + 0x00004ae6;
        }
    }
    obliv if (oexponent >= 0xfffe0001) {
        obliv if (oexponent < 0xfffe8001) {
            ooutput = 0x0000205e * oexponent + 0x00005f41;
        }
    }
    obliv if (oexponent >= 0xfffe8001) {
        obliv if (oexponent < 0xffff0001) {
            ooutput = 0x00002c4b * oexponent + 0x00007125;
        }
    }
    obliv if (oexponent >= 0xffff0001) {
        obliv if (oexponent < 0xffff8001) {
            ooutput = 0x0000379a * oexponent + 0x00007c73;
        }
    }
    obliv if (oexponent >= 0xffff8001) {
        obliv if (oexponent < 0x00000000) {
            ooutput = 0x00003eb2 * oexponent + 0x00008000;
        }
    }
    obliv if (oexponent >= 0x00000000) {
        obliv if (oexponent < 0x00008000) {
            ooutput = 0x00003eb2 * oexponent + 0x00008000;
        }
    }
    obliv if (oexponent >= 0x00008000) {
        obliv if (oexponent < 0x00010000) {
            ooutput = 0x0000379a * oexponent + 0x0000838c;
        }
    }
    obliv if (oexponent >= 0x00010000) {
        obliv if (oexponent < 0x00018000) {
            ooutput = 0x00002c4b * oexponent + 0x00008eda;
        }
    }
    obliv if (oexponent >= 0x00018000) {
        obliv if (oexponent < 0x00020000) {
            ooutput = 0x0000205e * oexponent + 0x0000a0be;
        }
    }
    obliv if (oexponent >= 0x00020000) {
        obliv if (oexponent < 0x00028000) {
            ooutput = 0x00001631 * oexponent + 0x0000b519;
        }
    }
    obliv if (oexponent >= 0x00028000) {
        obliv if (oexponent < 0x00030000) {
            ooutput = 0x00000e8e * oexponent + 0x0000c82f;
        }
    }
    obliv if (oexponent >= 0x00030000) {
        obliv if (oexponent < 0x00038000) {
            ooutput = 0x00000946 * oexponent + 0x0000d809;
        }
    }
    obliv if (oexponent >= 0x00038000) {
        obliv if (oexponent < 0x00040000) {
            ooutput = 0x000005cc * oexponent + 0x0000e433;
        }
    }

    revealOblivInt(&(io->output), ooutput, 0);
}

obliv int dot_product(obliv int *oa, obliv int *ob, int n) {
    obliv int dot_product = 0;
    int i;
    for (i = 0; i < n; i++) {
        dot_product += fixed_mul(oa[i], ob[i]);
    }
    return dot_product;
}

obliv int fixed_mul(obliv int oa, obliv int ob) {
    obliv int res = 0;
    obliv long long int lloa = (obliv long long int) oa;
    obliv long long int llob = (obliv long long int) ob;
    res = DESCALE((lloa*llob)); 
    return res;
}
     
void check_input_count(protocolIO *io) {
    int num_weights = ocBroadcastInt(io->n, 1);
    int num_inputs = ocBroadcastInt(io->n, 2);
    if (num_weights != num_inputs) {
        log_err("Unequal number of data points.\n\t"
        "Number of weights (party 1): %d\n\t"
        "Number of inputs (party 2): %d\n", num_weights, num_inputs);
        clean_errno();
        exit(1);
    }
}

